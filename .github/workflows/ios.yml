name: iOS CI/CD (Fastlane)

on:
  push:
    branches: [ main ]            # merge 到 main → TestFlight
    tags:
      - 'ios-alpha-v*'            # 封閉測試（可選）
      - 'ios-beta-v*'             # 公開測試
      - 'ios-v*'                  # 正式送審/上架
  workflow_dispatch:
    inputs:
      lane:
        description: "Fastlane lane to run (beta/release)"
        required: false
        default: beta

jobs:
  ios:
    runs-on: macos-15

    env:
      # App Store Connect API Key（唯一認證路徑）
      ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
      ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
      ASC_PRIVATE_KEY: ${{ secrets.ASC_PRIVATE_KEY }}
      ASC_PRIVATE_KEY_BASE64: ${{ secrets.ASC_PRIVATE_KEY_BASE64 }} # 可選，若私鑰以 base64 存放

      # iOS Distribution 憑證（p12）
      IOS_DIST_CERT_BASE64: ${{ secrets.IOS_DIST_CERT_BASE64 }}
      IOS_DIST_CERT_PASSWORD: ${{ secrets.IOS_DIST_CERT_PASSWORD }}

      # 可選：出口合規（如需申報加密）
      # EXPORT_COMPLIANCE_USES_ENCRYPTION: true
      # EXPORT_COMPLIANCE_IS_EXEMPT: true
      # EXPORT_COMPLIANCE_THIRD_PARTY: false
      # EXPORT_COMPLIANCE_PROPRIETARY: false
      # EXPORT_COMPLIANCE_AVAILABLE_ON_FRENCH_STORE: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity-check ASC secrets (safe)
        run: |
          set -euo pipefail

          # 顯示長度與前綴（前 8 碼），不輸出完整內容
          echo "ASC_KEY_ID length: ${#ASC_KEY_ID}"
          echo "ASC_KEY_ID head8: ${ASC_KEY_ID:0:8}"

          echo "ASC_ISSUER_ID length: ${#ASC_ISSUER_ID}"
          echo "ASC_ISSUER_ID head8: ${ASC_ISSUER_ID:0:8}"

          if [ -n "${ASC_PRIVATE_KEY_BASE64:-}" ]; then
            DECODED=$(echo "$ASC_PRIVATE_KEY_BASE64" | base64 -d 2>/dev/null || true)
            echo "ASC_PRIVATE_KEY_BASE64 decoded length: ${#DECODED}"
            echo "ASC_PRIVATE_KEY_BASE64 decoded head30:"
            echo "$DECODED" | head -c 30
            echo
          elif [ -n "${ASC_PRIVATE_KEY:-}" ]; then
            echo "ASC_PRIVATE_KEY length: ${#ASC_PRIVATE_KEY}"
            echo "ASC_PRIVATE_KEY head30:"
            echo "$ASC_PRIVATE_KEY" | head -c 30
            echo
          else
            echo "❌ 未提供 ASC_PRIVATE_KEY 或 ASC_PRIVATE_KEY_BASE64"
            exit 1
          fi

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.*'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Bundler dependencies
        working-directory: iosApp/fastlane
        run: |
          gem install bundler --no-document
          bundle config set path 'vendor/bundle'
          bundle install

      - name: Cache Ruby gems
        uses: actions/cache@v4
        with:
          path: iosApp/fastlane/vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('iosApp/fastlane/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Build Kotlin Framework
        run: |
          ./gradlew :composeApp:embedAndSignAppleFrameworkForXcode --no-daemon --stacktrace

      - name: Decide lane and flags by ref
        id: decide
        run: |
          REF='${{ github.ref_name }}'
          if [[ '${{ github.event_name }}' == 'push' && '${{ github.ref_type }}' == 'branch' ]]; then
            LANE='beta'
            SUBMIT=false
            AUTO_RELEASE=false
          elif [[ '${{ github.ref_type }}' == 'tag' && "$REF" == ios-v* ]]; then
            LANE='release'
            SUBMIT=true
            AUTO_RELEASE=false
          elif [[ '${{ github.ref_type }}' == 'tag' && "$REF" == ios-beta-v* ]]; then
            LANE='beta'
            SUBMIT=false
            AUTO_RELEASE=false
          elif [[ '${{ github.ref_type }}' == 'tag' && "$REF" == ios-alpha-v* ]]; then
            LANE='beta'
            SUBMIT=false
            AUTO_RELEASE=false
          else
            LANE='${{ github.event.inputs.lane || 'beta' }}'
            SUBMIT=false
            AUTO_RELEASE=false
          fi
          echo "lane=$LANE" >> $GITHUB_OUTPUT
          echo "submit=$SUBMIT" >> $GITHUB_OUTPUT
          echo "auto=$AUTO_RELEASE" >> $GITHUB_OUTPUT

      - name: Bump build number (CFBundleVersion)
        run: |
          echo "Bumping build to $GITHUB_RUN_NUMBER"
          /usr/bin/sed -i '' -E "s/^CURRENT_PROJECT_VERSION=.*/CURRENT_PROJECT_VERSION=${GITHUB_RUN_NUMBER}/" iosApp/Configuration/Config.xcconfig
          grep CURRENT_PROJECT_VERSION iosApp/Configuration/Config.xcconfig

      - name: Build and upload via Fastlane
        working-directory: iosApp
        env:
          SUBMIT_FOR_REVIEW: ${{ steps.decide.outputs.submit }}
          AUTOMATIC_RELEASE: ${{ steps.decide.outputs.auto }}
        run: |
          echo "lane=${{ steps.decide.outputs.lane }} submit=${{ env.SUBMIT_FOR_REVIEW }} auto=${{ env.AUTOMATIC_RELEASE }}"
          BUNDLE_GEMFILE=fastlane/Gemfile bundle exec fastlane ${{ steps.decide.outputs.lane }}

      - name: Upload ipa artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: iosApp/*.ipa

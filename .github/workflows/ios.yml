name: iOS CI/CD (Fastlane)

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
      - 'bugfix/*'
    tags:
      - 'ios-alpha-v*'
      - 'ios-beta-v*'
      - 'ios-v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      lane:
        description: "Fastlane lane to run (beta/release)"
        required: false
        default: beta

jobs:
  ios:
    runs-on: macos-15

    env:
      # App Store Connect API Key（擇一提供：ASC_PRIVATE_KEY 或 ASC_PRIVATE_KEY_BASE64）
      ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
      ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
      ASC_PRIVATE_KEY: ${{ secrets.ASC_PRIVATE_KEY }}
      ASC_PRIVATE_KEY_BASE64: ${{ secrets.ASC_PRIVATE_KEY_BASE64 }}

      # iOS Distribution 憑證（p12）
      IOS_DIST_CERT_BASE64: ${{ secrets.IOS_DIST_CERT_BASE64 }}
      IOS_DIST_CERT_PASSWORD: ${{ secrets.IOS_DIST_CERT_PASSWORD }}

      #（可選）你的 Apple Team ID，供 Fastlane update_code_signing_settings 使用
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.*'

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # Gradle 官方快取（相依與 build cache）
      - name: Set up Gradle (with cache)
        uses: gradle/actions/setup-gradle@v4

      # Ruby + Bundler 快取（取代手動安裝與獨立 gems cache）
      - name: Setup Ruby & bundle (with cache)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: true
          working-directory: iosApp/fastlane

      # CocoaPods（若 runner 尚未裝，安裝一次）
      - name: Ensure CocoaPods Installed
        run: pod --version || sudo gem install cocoapods --no-document

      # KMP：只跑 podInstall（需要時會自動產生/更新 podspec）
      - name: Prepare KMP Pods (podInstall)
        run: ./gradlew :composeApp:podInstall --no-daemon --stacktrace

      # 先還原 CocoaPods 快取，再視情況安裝
      - name: Cache CocoaPods
        id: pods-cache
        uses: actions/cache@v4
        with:
          path: |
            iosApp/Pods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('iosApp/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install Pods
        if: steps.pods-cache.outputs.cache-hit != 'true'
        run: |
          cd iosApp
          # 首次或 Pod 版本更新時才更新 Specs，以加速一般情況
          pod install --repo-update

      # 依 ref 決定要不要部署（main=release、develop=beta、feature/bugfix=build only、tag 亦可部署）
      - name: Decide lane and flags by ref
        id: decide
        shell: bash
        run: |
          REF='${{ github.ref_name }}'
          if [[ '${{ github.event_name }}' == 'push' && '${{ github.ref_type }}' == 'branch' ]]; then
            BRANCH="${{ github.ref_name }}"
            if [[ "$BRANCH" == 'main' ]]; then
              LANE='release'; SUBMIT=true;  AUTO_RELEASE=false; DEPLOY=true
            elif [[ "$BRANCH" == 'develop' ]]; then
              LANE='beta';    SUBMIT=false; AUTO_RELEASE=false; DEPLOY=true
            else
              LANE='beta';    SUBMIT=false; AUTO_RELEASE=false; DEPLOY=false
            fi
          elif [[ '${{ github.ref_type }}' == 'tag' && "$REF" == ios-v* ]]; then
            LANE='release'; SUBMIT=true;  AUTO_RELEASE=false; DEPLOY=true
          elif [[ '${{ github.ref_type }}' == 'tag' && "$REF" == ios-beta-v* ]]; then
            LANE='beta';    SUBMIT=false; AUTO_RELEASE=false; DEPLOY=true
          elif [[ '${{ github.ref_type }}' == 'tag' && "$REF" == ios-alpha-v* ]]; then
            LANE='beta';    SUBMIT=false; AUTO_RELEASE=false; DEPLOY=true
          elif [[ '${{ github.event_name }}' == 'pull_request' ]]; then
            LANE='beta';    SUBMIT=false; AUTO_RELEASE=false; DEPLOY=false
          else
            LANE='${{ github.event.inputs.lane || 'beta' }}'
            SUBMIT=false; AUTO_RELEASE=false; DEPLOY=true
          fi
          echo "lane=$LANE"   >> $GITHUB_OUTPUT
          echo "submit=$SUBMIT" >> $GITHUB_OUTPUT
          echo "auto=$AUTO_RELEASE" >> $GITHUB_OUTPUT
          echo "deploy=$DEPLOY" >> $GITHUB_OUTPUT
          echo "📦 Lane: $LANE, Submit: $SUBMIT, Deploy: $DEPLOY"



      # 真的要部署（main/develop 或 tag）
      - name: Build and upload via Fastlane
        if: steps.decide.outputs.deploy == 'true'
        working-directory: iosApp
        env:
          SUBMIT_FOR_REVIEW: ${{ steps.decide.outputs.submit }}
          AUTOMATIC_RELEASE: ${{ steps.decide.outputs.auto }}
        run: |
          echo "lane=${{ steps.decide.outputs.lane }} submit=${{ env.SUBMIT_FOR_REVIEW }} auto=${{ env.AUTOMATIC_RELEASE }}"
          BUNDLE_GEMFILE=fastlane/Gemfile bundle exec fastlane ${{ steps.decide.outputs.lane }}

      # 只建置不部署（feature/bugfix、PR）
      - name: Build only (no deploy)
        if: steps.decide.outputs.deploy == 'false'
        working-directory: iosApp
        run: |
          echo "🔨 Building only (no deployment)"
          BUNDLE_GEMFILE=fastlane/Gemfile bundle exec fastlane build_only || \
          xcodebuild -workspace iosApp.xcworkspace -scheme iosApp -configuration Release -archivePath build/iosApp.xcarchive archive

      - name: Upload ipa artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: iosApp/*.ipa
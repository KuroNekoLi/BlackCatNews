require "securerandom"
require "base64"

default_platform(:ios)

platform :ios do
  
  desc "Build ipa for App Store distribution"
  lane :build do
    # 僅使用 App Store Connect API Key（不使用 Apple ID 路徑）
    unless ENV["ASC_KEY_ID"] && ENV["ASC_ISSUER_ID"] && ENV["ASC_PRIVATE_KEY"]
      UI.user_error!("缺少 App Store Connect API 金鑰設定：請提供 ASC_KEY_ID、ASC_ISSUER_ID、ASC_PRIVATE_KEY")
    end
    puts "🔑 使用 App Store Connect API Key 認證"
    api_key = app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_PRIVATE_KEY"],
      is_key_content_base64: ENV["ASC_PRIVATE_KEY_BASE64"] == "true"
    )

    # 使用手動簽章（匯入 p12 到臨時 keychain + 下載 App Store 描述檔）
    keychain_name = "fastlane_tmp_keychain"
    keychain_password = SecureRandom.uuid
    puts "🔐 創建臨時 keychain: #{keychain_name}"
    keychain_path = File.expand_path("~/Library/Keychains/#{keychain_name}-db")
    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: false
    )
    keychain_candidates = [
      File.expand_path("~/Library/Keychains/#{keychain_name}-db"),
      File.expand_path("~/Library/Keychains/#{keychain_name}.keychain-db"),
      File.expand_path("~/Library/Keychains/#{keychain_name}.keychain")
    ]
    detected_path = keychain_candidates.find { |p| File.exist?(p) }
    keychain_path = detected_path || keychain_path

    unless (ENV["IOS_DIST_CERT_BASE64"] || ENV["IOS_DIST_CERT_PATH"]) && ENV["IOS_DIST_CERT_PASSWORD"]
      UI.user_error!("缺少發行憑證（p12）設定：請提供 IOS_DIST_CERT_BASE64（或 IOS_DIST_CERT_PATH）與 IOS_DIST_CERT_PASSWORD")
    end
    cert_path = ENV["IOS_DIST_CERT_PATH"]
    if cert_path.nil? || cert_path.empty?
      cert_path = File.join(Dir.pwd, "dist_cert.p12")
      File.binwrite(cert_path, Base64.decode64(ENV["IOS_DIST_CERT_BASE64"]))
    end
    cert_password = ENV["IOS_DIST_CERT_PASSWORD"]
    puts "🔏 匯入 Distribution 憑證到臨時 keychain"
    import_certificate(
      certificate_path: cert_path,
      certificate_password: cert_password,
      keychain_path: keychain_path,
      keychain_password: keychain_password
    )

    sigh(
      api_key: api_key,
      app_identifier: "com.linli.blackcatnews",
      force: true
    )
    profile_uuid = lane_context[SharedValues::SIGH_UUID]
    profile_name = lane_context[SharedValues::SIGH_NAME]
    puts "📋 使用描述檔: #{profile_name} (#{profile_uuid})"

    export_opts = {
      method: "app-store",
      signingStyle: "manual",
      provisioningProfiles: {
        "com.linli.blackcatnews" => profile_uuid
      }
    }
    xcargs = [
      "-allowProvisioningUpdates",
      "CODE_SIGN_STYLE=Manual",
      "CODE_SIGN_IDENTITY='iPhone Distribution'",
      "PROVISIONING_PROFILE=#{profile_uuid}",
      "OTHER_CODE_SIGN_FLAGS='--keychain #{keychain_path}'"
    ].join(" ")

    gym(
      workspace: "iosApp.xcworkspace",
      scheme: "iosApp",
      configuration: "Release",
      export_method: "app-store",
      clean: true,
      include_bitcode: false,
      export_options: export_opts,
      xcargs: xcargs,
      output_directory: ".",
      output_name: "BlackCatNews"
    )

    # 清理臨時 keychain
    puts "🗑️ 刪除臨時 keychain: #{keychain_name}"
    delete_keychain(name: keychain_name)
  end

  desc "Upload to TestFlight"
  lane :beta do
    build
    
    # 僅使用 API Key 上傳 TestFlight
    api_key = app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_PRIVATE_KEY"],
      is_key_content_base64: ENV["ASC_PRIVATE_KEY_BASE64"] == "true"
    )
    pilot(
      api_key: api_key,
      ipa: "BlackCatNews.ipa",
      skip_waiting_for_build_processing: false
    )
  end

  desc "Upload to App Store Connect (不自動送審)"
  lane :release do
    build
    
    # 讀取環境變數控制送審與上架
    submit_for_review = ENV["SUBMIT_FOR_REVIEW"] == "true"
    automatic_release = ENV["AUTOMATIC_RELEASE"] == "true"
    
    # 出口合規資訊（Export Compliance）
    # 預設假設未使用需申報的加密（大多數僅使用 HTTPS 的 app 可設為 false）
    # 可用環境變數覆寫：
    #   EXPORT_COMPLIANCE_USES_ENCRYPTION, EXPORT_COMPLIANCE_IS_EXEMPT,
    #   EXPORT_COMPLIANCE_THIRD_PARTY, EXPORT_COMPLIANCE_PROPRIETARY,
    #   EXPORT_COMPLIANCE_AVAILABLE_ON_FRENCH_STORE
    uses_encryption = (ENV["EXPORT_COMPLIANCE_USES_ENCRYPTION"] || "false") == "true"
    submission_info = { export_compliance_uses_encryption: uses_encryption }
    if uses_encryption
      submission_info[:export_compliance_is_exempt] = ENV["EXPORT_COMPLIANCE_IS_EXEMPT"] == "true"
      submission_info[:export_compliance_contains_third_party_cryptography] = ENV["EXPORT_COMPLIANCE_THIRD_PARTY"] == "true"
      submission_info[:export_compliance_contains_proprietary_cryptography] = ENV["EXPORT_COMPLIANCE_PROPRIETARY"] == "true"
      if ENV.key?("EXPORT_COMPLIANCE_AVAILABLE_ON_FRENCH_STORE")
        submission_info[:export_compliance_available_on_french_store] = ENV["EXPORT_COMPLIANCE_AVAILABLE_ON_FRENCH_STORE"] == "true"
      end
    end

    # 僅使用 API Key 上傳並（可選）送審
    api_key = app_store_connect_api_key(
      key_id: ENV["ASC_KEY_ID"],
      issuer_id: ENV["ASC_ISSUER_ID"],
      key_content: ENV["ASC_PRIVATE_KEY"],
      is_key_content_base64: ENV["ASC_PRIVATE_KEY_BASE64"] == "true"
    )
    deliver(
      api_key: api_key,
      ipa: "BlackCatNews.ipa",
      submit_for_review: submit_for_review,
      automatic_release: automatic_release,
      submission_information: submission_info,
      skip_metadata: true,
      skip_screenshots: true,
      force: true,
      precheck_include_in_app_purchases: false,
      run_precheck_before_submit: true
    )
  end
end
